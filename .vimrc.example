" ////////////////////////////////////
" Current .vimrc - running VimR (NVIM)
" ====================================

if has('vim_starting')
    set nocompatible                              " Be iMproved
endif

" /////////////
"
" Vim-Plug core
"
" \\\\\\\\\\\\\

" Required for VimPlug:
" Specify a directory for plugins (for Neovim/VimR: ~/.local/share/nvim/plugged; For MacVim: '~/.vim/plugged')

call plug#begin(expand('~/.local/share/nvim/plugged'))
" call plug#begin(expand('~/.vim/plugged'))

" ///////////////////////////
"
" Plug (install|use) packages
"
" ===========================

"
" Base Utility Packages
"
Plug 'tpope/vim-sensible'                                         " Defaults everyone can agree on
Plug 'Shougo/unite.vim'                                           " Unite and create user interfaces
Plug 'Shougo/vimfiler.vim'                                        " Powerful file explorer implemented by Vim script
Plug '/usr/local/opt/fzf'                                         " A command-line fuzzy finder written in Go
Plug 'junegunn/fzf.vim'                                           " fzf ‚ù§Ô∏è vim
Plug 'ggreer/the_silver_searcher'                                 " A code-searching tool similar to ack, but faster.
" Plug 'neovim/node-host', { 'do': 'npm install -g neovim' }

"
" Status and Display
"
Plug 'ryanoasis/vim-devicons'                                     " Adds file type glyphs/icons to popular Vim plugins: NERDTree, vim-, Powerline, etc... ** REQUIRES PATCHED FONTS **
" don't need numbertoggle anymore as this can be done with an auto-command
" (see below)
" Plug 'jeffkreeftmeijer/vim-numbertoggle'                          " Toggle number (during insert) and relativenumber (during command) modes
Plug 'vim-airline/vim-airline'                                    " Fancy Airline status bar
Plug 'vim-airline/vim-airline-themes'                             " Fancy Airline status bar themes
Plug 'jeetsukumaran/vim-buffergator'                              " List, select and switch between buffers
Plug 'Yggdroot/indentLine'                                        " Display the indention levels with thin vertical lines

"
" Movement and Workflow
"

Plug 'junegunn/vim-easy-align'                                    " üåª A Vim alignment plugin
Plug 'easymotion/vim-easymotion'                                  " Vim motions on speed.
Plug 't9md/vim-textmanip'                                         " Easy text manipulation for VIM
Plug 'matze/vim-move'                                             " Move lines and blocks
Plug 'terryma/vim-expand-region'                                  " Allows you to visually select increasingly larger regions of text using the same key combination
Plug 'coderifous/textobj-word-column.vim'                         " Makes operating on columns super easy
Plug 'rhysd/accelerated-jk'                                       " accelerate up-down moving!
Plug 'Olical/vim-enmasse'                                         " Edit every line in a quickfix list at the same time

"
" Dev Workflow
"

Plug 'tpope/vim-fugitive'                                         " GIT stuff
Plug 'airblade/vim-gitgutter'                                     " Show GIT diffs in left column
Plug 'tomtom/tcomment_vim'                                        " Extensible commenting for VIM
Plug 'tpope/vim-surround'                                         " Surround selection with entry
Plug 'Raimondi/delimitMate'                                       " Provides insert mode auto-completion for quotes, parens, brackets, etc.
Plug 'AndrewRadev/splitjoin.vim'                                  " Join / Split lines functions
Plug 'wellle/targets.vim'                                         " Additional text targets
Plug 'chrisbra/NrrwRgn'                                           " A Narrow Region Plugin for VIM

"
" HTML/XML
"

Plug 'othree/html5.vim'                                           " HTML5 + inline SVG omnicomplete function, indent and syntax
Plug 'tpope/vim-ragtag'
Plug 'alvan/vim-closetag'                                         " Auto close (X)HTML Tags
Plug 'skwp/vim-html-escape', {'for': ['html']}
Plug 'larsbs/vim-xmll'                                            " Tweaked Vim XML syntax highlighting plugin - React close tags look a little nicer with this!
Plug 'tmhedberg/matchit'                                          " Extended % matching for HTML, LaTeX, and many other languages
Plug 'stephpy/vim-yaml'                                           " Make YAML suck less...
Plug 'mustache/vim-mustache-handlebars'                           " Mustache and Handlebars mode for vim

"
" CSS & Preprocessors
"

Plug 'hail2u/vim-css3-syntax'                                     " CSS3 syntax (and syntax defined in some foreign specifications) support for Vim's built-in syntax/css.vim
Plug 'ap/vim-css-color'                                           " Highlight background of CSS colors
Plug 'cakebaker/scss-syntax.vim'                                  " Vim syntax file for scss (Sassy CSS)
Plug 'groenewege/vim-less'                                        " syntax for LESS (dynamic CSS)
Plug 'othree/csscomplete.vim'                                     " Update the bult-in CSS complete function to latest CSS standard
Plug 'styled-components/vim-styled-components'                    " Bundle for http://styled-components.com based javascript files.

"
" JavaScript
"

Plug 'neoclide/vim-jsx-improve', { 'for': [ 'javascript', 'js', 'jsx' ]}
" Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
" Plug 'heavenshell/vim-prettier'
" Plug 'pangloss/vim-javascript'
" Plug 'othree/yajs.vim'
" Plug 'mxw/vim-jsx'
Plug 'autozimu/LanguageClient-neovim', {
            \ 'branch': 'next',
            \ 'do': 'bash install.sh',
            \}
Plug 'sourcegraph/javascript-typescript-langserver'               " JavaScript/TypeScript Language Server
Plug 'felixfbecker/php-language-server'                           " PHP Language Server
Plug 'vscode-langservers/vscode-css-languageserver-bin'           " CSS/LESS/SCSS Language Server
Plug 'editorconfig/editorconfig-vim'                              " EditorConfig support

if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " Dark powered asynchronous completion framework for neovim
else
    Plug 'Shougo/deoplete.nvim'                                   " Dark powered asynchronous completion framework for neovim
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'

"
" Async linting
"
Plug 'w0rp/ale'

"
" Code Testing and Coverage
"
Plug 'craigdallimore/vim-jest-cli'                                " Jest CLI for VIM
Plug 'retorillo/istanbul.vim'                                     " Visualize code coverage and summarize uncoered lines into quickfix by reading coverage.json

"
" Themes
"
Plug 'NewProggie/NewProggie-Color-Scheme'                        " newproggie colorscheme

"
" Finalize VimPlug initialization
"
call plug#end()


" ///////////
"
" Basic Setup
"
" \\\\\\\\\\

" cd ~/Development                                              " Start in Development folder

if (has("termguicolors"))
    set termguicolors
endif

set background=dark                                             " Set background (should be before colorscheme)
colorscheme newproggie                                          " Set colorscheme

let mapleader=','                                               "  Map <Leader> key:
syntax on                                                       " turn on syntax highlighting
syntax enable                                                   " turn on syntax highlighting

set timeout timeoutlen=750                                      " Extend keystroke combination timeout
set foldmethod=indent                                           " Set fold method (manual|marker|diff|expr|indent)
set encoding=utf-8                                              " Set default encoding to UTF-8:
set fileencoding=utf-8
set fileencodings=utf-8                                         " Set default file encodings to UTF-8
set fileformats=unix,dos,mac                                    " Prefer Unix over Windows over OS 9 formats
set noerrorbells                                                " No beeps
set hlsearch                                                    " Highlight found searches
set incsearch                                                   " Shows the match while typing
set ignorecase                                                  " Search case insensitive...
set smartcase                                                   " ... but not when search pattern contains upper case characters
set wildmenu                                                    " Tab completion
set nocursorline                                                " Do not highlight cursor line
set nocursorcolumn                                              " Do not highlight current cursor column
set ruler                                                       " Show cursor position
set laststatus=2                                                " Show status line
set history=1000                                                " Maximum history
set wildignore+=*/.git/*,*/.bzr/*,*~,*/build/*,*.pyc/*.DS_Store " Ignore things
set scrolloff=2                                                 " At least two lines and ...
set sidescrolloff=2                                             " two columns context
set showmode                                                    " Show current mode.
set noerrorbells                                                " No beeps
set noswapfile                                                  " Don't use swapfile
set nobackup                                                    " Don't create backup files
set splitright                                                  " Split vertical windows right to the current windows
set splitbelow                                                  " Split horizontal windows below to the current windows
set autowrite                                                   " Automatically save before :next, :make etc.
set autoread                                                    " Automatically reread changed files without asking me anything
set number                                                      " show line numbers
set relativenumber                                              " show relative line to help with movement
set showcmd                                                     " Show command
set showmatch                                                   " Do not show matching brackets by flickering
set matchtime=3                                                 " speed up showmatch
set nowrap                                                      " don't wrap lines
set tabstop=4                                                   " tell vim how many columns a tab counts for
set softtabstop=4                                               " control how many columns vim uses when you hit Tab in insert mode
set shiftwidth=4                                                " control how many columns text is indented with the reindent operations
set expandtab                                                   " Hitting Tab in insert mode will produce the appropriate number of spaces
set hidden                                                      " Enable hidden buffers

" ////////////////////////////////////////////////
"
" Extended basic (non-plugin-driven) key mappings
"
" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

" Action: Newline before/after (exit insert mode)
nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>
" Alt version: doesn't move cursor and doesn't go through insert mode...
" nnoremap <silent> <Leader>o :<C-u>call append(line("."),   repeat([""], v:count1))<CR>
" nnoremap <silent> <Leader>O :<C-u>call append(line(".")-1, repeat([""], v:count1))<CR>

" Action: Insert mode at beginning/end of line with extra space
nnoremap <Leader>A A<Space>
nnoremap <Leader>I A<Space>

"
" Action: Move around window splits using alt+(h|j|k|l)
"
nmap <silent> Àô :wincmd h<CR>
nmap <silent> ‚àÜ :wincmd j<CR>
nmap <silent> Àö :wincmd k<CR>
nmap <silent> ¬¨ :wincmd l<CR>

"
" Action: Remove all trailing whitespace by pressing F5
"
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

"
" Action: Remove all trailing whitespace by pressing F8 (only if it comes after a semicolon)
"
nnoremap <F8> :let _s=@/<Bar>:%s/;\s\+$/;/e<Bar>:let @/=_s<Bar><CR>

"
" Auto: highlight trailing spaces like a boss
"
:highlight ExtraWhitespace ctermbg=grey guibg=#999999
:match ExtraWhitespace /\s\+$/

"
" Auto: highlight paren match color control
"
autocmd BufRead,BufNewFile * syn match parens /[(){}]/ | hi parens ctermfg=blue

if has("gui_vimr")
    "" Dev Icons Font Setup
    let g:ycm_path_to_python_interpreter = '/usr/bin/python'

    " Indent lines with cmd+[ and cmd+]
    nmap ‚Äò >>
    nmap ‚Äú <<
    vmap ‚Äò >gv
    vmap ‚Äú <gv
    nmap <D-]> >>
    nmap <D-[> <<
    vmap <D-]> >gv
    vmap <D-[> <gv

    noremap <C-Tab> :tabnext<CR>
    noremap <C-S-Tab> :tabprev<CR>
    noremap tl :tabnext<CR>
    noremap th :tabprev<CR>
    noremap tn :tabnew<CR>
endif

if has("gui_macvim")
    set guifont=Sauce\ Code\ Pro\ Light\ Nerd\ Font\ Complete:h13

    "" Dev Icons Font Setup
    "let g:webdevicons_enable_vimfiler = 1
    "let g:webdevicons_enable_airline_statusline = 1

    " Disable print shortcut for 'goto anything...'
    macmenu File.Print key=<nop>

    " Disable new tab shortcut for 'goto file...'
    macmenu File.New\ Tab key=<nop>

    " Move  with cmd+alt
    macm Window.Select\ Previous\ Tab  key=<D-M-LEFT>

    macm Window.Select\ Next\ Tab	   key=<D-M-RIGHT>
    " Open new window via cmd+shift+n
    macmenu File.New\ Window key=<D-N>

    " create a new menu item with title "New File" and bind it to cmd+n
    " new files will be created on a new tab
    an 10.190 File.New\ File <nop>
    macmenu File.New\ File action=addNewTab: key=<D-n>

    " No toolbars, menu or scrollbars in the GUI
    "set guifont=Source\ Code\ Pro\ for\ Powerline:h12
    set clipboard+=unnamed
    set vb t_vb=
    set guioptions-=m  "no menu
    " set guioptions-=T  "no toolbar
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r  "no scrollbar
    set guioptions-=i" ctrl-Tab goes to the next tab.
    " ctrl-Shift-Tab goes to the prev tab.
    " th goes to the next tab.
    " tl goes to the prev tab.
    noremap <C-Tab> :tabnext<CR>
    noremap <C-S-Tab> :tabprev<CR>
    noremap tl :tabnext<CR>
    noremap th :tabprev<CR>
    noremap tn :tabnew<CR>

endif

" /////////////////////
"
" File and Syntax Stuff
"
" \\\\\\\\\\\\\\\\\\\\\

"
" yaml indentation
"
au FileType yaml setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
au BufNewFile,BufRead .stylelintrc set filetype=json

"
" Autocmd for JSX filetype support " Do I need this?
"
augroup FiletypeGroup
    autocmd!
    au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
augroup END

"
" Autocmd for numbertoggle
" Description: relative line number toggle insert vs. normal mode
"
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" ////////////////////////
"
" vim-js-context-coloring
"
" \\\\\\\\\\\\\\\\\\\\\\\\

let g:js_context_colors_enabled=1
let g:js_context_colors=1
let g:js_context_colors_insertmode=1
let g:js_context_colors_usemaps=1
let g:js_context_colors_colorize_comments=1
let g:js_context_colors_comment_higroup=1
let g:js_context_colors_debug=0
let g:js_context_colors_highlight_function_names=1
" let g:js_context_colors_es5=1
let g:js_context_colors_block_scope=1
let g:js_context_colors_block_scope_with_let=1
let g:js_context_colors_jsx=1
let g:js_context_colors_fold=1
let g:js_context_colors_folding=1
let g:js_context_colors_allow_jsx_syntax=1

" ////////////////////////
"
" Plugin-specific Settings:
"
" \\\\\\\\\\\\\\\\\\\\\\\\

" ************
"
" ALE Settings
"
" ************

" filetype off
" let &runtimepath.=',~/.local/share/nvim/plugged/ale'
" filetype plugin on
"let g:ale_enabled = 1

let g:ale_sign_column_always         = 1
let g:ale_completion_enabled         = 1
let g:ale_linters                    = {'javascript': ['eslint', 'stylelint'], 'jsx': ['eslint', 'stylelint'], 'less': ['prettier']}
let g:ale_linter_aliases             = {'javascript': 'css', 'jsx': 'css'}
let g:ale_sign_error                 = '‚å¶'
let g:ale_sign_warning               = '‚òû'
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str         = 'E'
let g:ale_echo_msg_warning_str       = 'W'
let g:ale_echo_msg_format            = '[%linter%] %s [%severity%]'

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" ***************
"
" Accelerated J/K
"
" ***************
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

" ****************
"
" Airline settings
"
" ****************

let g:airline_theme                       = 'base16_spacemacs'
let g:airline_powerline_fonts             = 1
let g:_powerline_fonts                    = 1

if !exists('g:airline_symbols')
    let g:airline_symbols                 = {}
endif

let g:airline#extensions#tabline#enabled  = 1
let g:airline#extensions#tabline#fnamemod = ':t' " only show filename in buffer tabline tabs

" unicode symbols
let g:airline_left_sep                    = '¬ª'
let g:airline_left_sep                    = '‚ñ∂'
let g:airline_right_sep                   = '¬´'
let g:airline_right_sep                   = '‚óÄ'
let g:airline_symbols.linenr              = '‚êä'
let g:airline_symbols.linenr              = '‚ê§'
let g:airline_symbols.linenr              = '¬∂'
let g:airline_symbols.branch              = '‚éá'
let g:airline_symbols.paste               = 'œÅ'
let g:airline_symbols.paste               = '√û'
let g:airline_symbols.paste               = '‚à•'
let g:airline_symbols.whitespace          = 'Œû'

" airline symbols
let g:airline_left_sep                    = 'ÓÇ∞'
let g:airline_left_alt_sep                = 'ÓÇ±'
let g:airline_right_sep                   = 'ÓÇ≤'
let g:airline_right_alt_sep               = 'ÓÇ≥'
"let g:airline_left_sep = 'ÓÇ∞'
"let g:airline_left_alt_sep = 'ÓÇ∞'
"let g:airline_right_sep = 'ÓÇ≤'
"let g:airline_right_alt_sep = 'ÓÇ≤'
let g:airline_symbols.branch              = 'ÓÇ†'
let g:airline_symbols.readonly            = 'ÓÇ¢'
let g:airline_symbols.linenr              = 'ÓÇ°'

" ***************
"
" Buffer Handling
"
" ***************

" open a new empty buffer
" This replaces :tabnew
"nmap <Leader>T :enew<cr>
nmap <Leader>t :enew<CR>

" Move to the next buffer
nmap <Leader>l :bnext<CR>
nmap <Leader>] :bnext<CR>

" Move to the previous buffer
nmap <Leader>h :bprevious<CR>
nmap <Leader>[ :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <Leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <Leader>bl :ls<CR>

" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" I want my own keymappings...
let g:buffergator_suppress_keymaps = 1

" Looper buffers
"let g:buffergator_mru_cycle_loop = 1

" Go to the previous buffer open
nmap <Leader>jj :BuffergatorMruCyclePrev<cr>

" Go to the next buffer open
nmap <Leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <Leader>bl :BuffergatorOpen<cr>

" ************************************************
"
" vim-closetag/delimitMate conflict resolution/fix
"
" ************************************************

let g:closetag_filenames = "*.xml,*.html,*.xhtml,*.phtml,*.php"
au FileType xml,html,phtml,php,xhtml,js let b:delimitMate_matchpairs = "(:),[:],{:},[:]"

" *****************
"
" vimfiler Settings
"
" *****************

let g:vimfiler_as_default_explorer          = get(g:, 'vimfiler_as_default_explorer', 1)
let g:vimfiler_restore_alternate_file       = get(g:, 'vimfiler_restore_alternate_file', 1)
let g:vimfiler_tree_indentation             = get(g:, 'vimfiler_tree_indentation', 2)
let g:vimfiler_tree_leaf_icon               = get(g:, 'vimfiler_tree_leaf_icon', ' ')
let g:vimfiler_tree_opened_icon             = get(g:, 'vimfiler_tree_opened_icon', '‚ñº')
let g:vimfiler_tree_closed_icon             = get(g:, 'vimfiler_tree_closed_icon', '‚ñ∑')
let g:vimfiler_readonly_file_icon           = get(g:, 'vimfiler_readonly_file_icon', '‚óã')
let g:vimfiler_marked_file_icon             = get(g:, 'vimfiler_marked_file_icon', '‚àö')
let g:vimfiler_ignore_pattern               = get(g:, 'vimfiler_ignore_pattern', [
            \ '^\.git$',
            \ '^\.DS_Store$',
            \ '^\.init\.vim-rplugin\~$',
            \ '^\.netrwhist$',
            \ '\.class$'
            \])
call vimfiler#custom#profile('default', 'context', {
            \ 'explorer' : 1,
            \ 'winwidth' : 38,
            \ 'winminwidth' : 38,
            \ 'toggle' : 1,
            \ 'auto_expand': 1,
            \ 'direction' : 'topleft',
            \ 'columns' : 'type',
            \ 'explorer_columns': 'type',
            \ 'parent': 0,
            \ 'safe' : 0,
            \ 'simple': 0,
            \ 'split' : 1,
            \ 'status': 1,
            \ 'hidden': 1,
            \ 'force-hide' : 1
            \ })
let g:webdevicons_enable_vimfiler           = 1
let g:webdevicons_enable_airline_statusline = 1

autocmd FileType vimfiler setlocal nobuflisted
autocmd FileType vimfiler setlocal nonumber
autocmd FileType vimfiler setlocal norelativenumber
autocmd FileType vimfiler nmap <silent><buffer> <2-LeftMouse> <Plug>(vimfiler_smart_l)


" map <D-\> :VimFilerExplorer<CR> " Let's stop mapping controls to the command key
map <leader>\ :VimFilerExplorer<CR>

" *********
"
" EasyAlign
"
" *********

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ***************
"
" Language Server
"
" ***************

let g:LanguageClient_serverCommands = {
    \ 'javascript': ['javascript-typescript-langserver'],
    \ 'javascript.jsx': ['javascript-typescript-langserver'],
    \ 'css': ['vscode-css-languageserver-bin'],
    \ }

" ********
"
" Deoplete
"
" ********

let g:deoplete#enable_at_startup  = 1
let g:deoplete#enable_ignore_case = 1
let g:deoplete#enable_smart_case  = 1
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set completeopt=longest,menuone,preview

" omnifuncs
augroup omnifuncs
    autocmd!
    autocmd FileType css,scss,sass,less setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType jsx,js setlocal omnifunc=javascriptcomplete#CompleteJS " removed javascript before jsx
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup end

" tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" Indent line display
let g:indentLine_char = '|'

"
" vim-move
"

" Visual Mode cmd+j moves selected block down
" Consider binding of <Leader> instead of <D> " Stop binding shit to
" Command
vmap <D-j> <Plug>MoveBlockDown
" vmap <D-j> <Plug>MoveBlockDown " stop binding shit to command
" Visual Mode cmd+k moves selected block up
vmap <D-k> <Plug>MoveBlockUp
" vmap <D-k> <Plug>MoveBlockUp " stop binding shit to command
" Cmd+j Move current line down
nmap <D-j> <plug>MoveLineDown
" nmap <D-j> <plug>MoveLineDown " stop binding shit to command
" Cmd+k Move current line up
nmap <D-k> <Plug>MoveLineUp
" nmap <D-k> <Plug>MoveLineUp " Stop binding shit to command

"
" vim-textmanip
"

" xmap <C-j> <Plug>(textmanip-move-down)
" xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
